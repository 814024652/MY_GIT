## 全局
jdbc.driverClassName=com.mysql.jdbc.Driver
jdbc.username.master=108d9c377dfdc98107a8c91f03aceb46
jdbc.password.master=3ea2d768915c1a916944d9bd174e1846

timeBetweenEvictionRunsMillis=60000
minEvictableIdleTimeMillis=300000
validationQuery=select 1
validationQueryTimeout=90000
testWhileIdle=true
testOnBorrow=true
testOnReturn=false
poolPreparedStatements=true
maxPoolPreparedStatementPerConnectionSize=20
# 监控统计用的filter:stat  日志用的filter:log4j    防御sql注入的filter:wall
filters=stat

# sqlSessionFactory
mybatis.mapperLocations=com/gome/pms/mapper/*.xml
mybatis.typeAliasesPackage=com.gome.pms.entity
mybatis.configLocation=mybatis-config.xml


## 主库
# 初始化时建立物理连接的个数
initialSize.master=2
# 最大连接池数量
maxActive.master=10
# 最小连接池数量
minIdle.master=2
# 获取连接时最大等待时间，单位毫秒。缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。
maxWait.master=60000


## 从库
# 初始化时建立物理连接的个数
initialSize.slave=2
# 最大连接池数量
maxActive.slave=10
# 最小连接池数量
minIdle.slave=2
# 获取连接时最大等待时间，单位毫秒。缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。
maxWait.slave=60000



# 详细
spring.datasource.nodes[0].url=jdbc:mysql://mysql.m.axwl.gome.inc/axwl_pt_pms?useUnicode=true&characterEncoding=utf-8&allowMultiQueries=true
spring.datasource.nodes[0].username=${jdbc.username.master}
spring.datasource.nodes[0].password=${jdbc.password.master}
spring.datasource.nodes[0].name=master
spring.datasource.nodes[0].master=true
spring.datasource.nodes[0].weight=1
spring.datasource.nodes[0].interval=5000
spring.datasource.nodes[0].driverClassName=${jdbc.driverClassName}
spring.datasource.nodes[0].initialSize=${initialSize.master}
spring.datasource.nodes[0].maxActive=${maxActive.master}
spring.datasource.nodes[0].minIdle=${minIdle.master}
spring.datasource.nodes[0].maxWait=${maxWait.master}
spring.datasource.nodes[0].timeBetweenEvictionRunsMillis=${timeBetweenEvictionRunsMillis}
spring.datasource.nodes[0].minEvictableIdleTimeMillis=${minEvictableIdleTimeMillis}
spring.datasource.nodes[0].validationQuery=${validationQuery}
spring.datasource.nodes[0].validationQueryTimeout=${validationQueryTimeout}
spring.datasource.nodes[0].testWhileIdle=${testWhileIdle}
spring.datasource.nodes[0].testOnBorrow=${testOnBorrow}
spring.datasource.nodes[0].testOnReturn=${testOnReturn}
spring.datasource.nodes[0].poolPreparedStatements=${poolPreparedStatements}
spring.datasource.nodes[0].maxPoolPreparedStatementPerConnectionSize=${maxPoolPreparedStatementPerConnectionSize}
spring.datasource.nodes[0].filters=${filters}

spring.datasource.nodes[1].url=jdbc:mysql://mysql.s1.axwl.gome.inc/axwl_pt_pms?useUnicode=true&characterEncoding=utf-8
spring.datasource.nodes[1].username=${jdbc.username.master}
spring.datasource.nodes[1].password=${jdbc.password.master}
spring.datasource.nodes[1].name=slave1
spring.datasource.nodes[1].master=false
spring.datasource.nodes[1].weight=1
spring.datasource.nodes[1].interval=5000
spring.datasource.nodes[1].driverClassName=${jdbc.driverClassName}
spring.datasource.nodes[1].initialSize=${initialSize.slave}
spring.datasource.nodes[1].maxActive=${maxActive.slave}
spring.datasource.nodes[1].minIdle=${minIdle.slave}
spring.datasource.nodes[1].maxWait=${maxWait.slave}
spring.datasource.nodes[1].timeBetweenEvictionRunsMillis=${timeBetweenEvictionRunsMillis}
spring.datasource.nodes[1].minEvictableIdleTimeMillis=${minEvictableIdleTimeMillis}
spring.datasource.nodes[1].validationQuery=${validationQuery}
spring.datasource.nodes[1].validationQueryTimeout=${validationQueryTimeout}
spring.datasource.nodes[1].testWhileIdle=${testWhileIdle}
spring.datasource.nodes[1].testOnBorrow=${testOnBorrow}
spring.datasource.nodes[1].testOnReturn=${testOnReturn}
spring.datasource.nodes[1].poolPreparedStatements=${poolPreparedStatements}
spring.datasource.nodes[1].maxPoolPreparedStatementPerConnectionSize=${maxPoolPreparedStatementPerConnectionSize}
spring.datasource.nodes[1].filters=${filters}

spring.datasource.nodes[2].url=jdbc:mysql://mysql.s2.axwl.gome.inc/axwl_pt_pms?useUnicode=true&characterEncoding=utf-8
spring.datasource.nodes[2].username=${jdbc.username.master}
spring.datasource.nodes[2].password=${jdbc.password.master}
spring.datasource.nodes[2].name=slave2
spring.datasource.nodes[2].master=false
spring.datasource.nodes[2].weight=1
spring.datasource.nodes[2].interval=5000
spring.datasource.nodes[2].driverClassName=${jdbc.driverClassName}
spring.datasource.nodes[2].initialSize=${initialSize.slave}
spring.datasource.nodes[2].maxActive=${maxActive.slave}
spring.datasource.nodes[2].minIdle=${minIdle.slave}
spring.datasource.nodes[2].maxWait=${maxWait.slave}
spring.datasource.nodes[2].timeBetweenEvictionRunsMillis=${timeBetweenEvictionRunsMillis}
spring.datasource.nodes[2].minEvictableIdleTimeMillis=${minEvictableIdleTimeMillis}
spring.datasource.nodes[2].validationQuery=${validationQuery}
spring.datasource.nodes[2].validationQueryTimeout=${validationQueryTimeout}
spring.datasource.nodes[2].testWhileIdle=${testWhileIdle}
spring.datasource.nodes[2].testOnBorrow=${testOnBorrow}
spring.datasource.nodes[2].testOnReturn=${testOnReturn}
spring.datasource.nodes[2].poolPreparedStatements=${poolPreparedStatements}
spring.datasource.nodes[2].maxPoolPreparedStatementPerConnectionSize=${maxPoolPreparedStatementPerConnectionSize}
spring.datasource.nodes[2].filters=${filters}